---
description: Global Project Documentation (to be served as a reference to the agents)
globs:
alwaysApply: true
---

# Guide AI Project Documentation

## System Overview

Guide AI is a video-guided Q&A system that allows users to upload videos or provide video URLs and ask questions about the video content. The system provides AI-powered responses with reasoning, key frames, and timestamps.

## Data Flow Architecture

### 1. Authentication Flow

#### User Registration (Signup)
```
Frontend (Signup.tsx) → POST /api/auth/signup/ → users.views.signup_view
├── Input: email, password, firstName, lastName
├── Processing:
│   ├── Check if email exists in database
│   ├── Create new User object if email is unique
│   └── Hash password using Django's make_password
└── Response: Success/Error message
```

#### User Login
```
Frontend (Login.tsx) → POST /api/auth/login/ → users.views.login_view
├── Input: email, password
├── Processing:
│   ├── Check if user exists by email
│   ├── Authenticate using EmailBackend
│   ├── Create Django session if successful
│   └── Store session in localStorage (frontend)
└── Response: User data + session cookie
```

#### Session Management
- Frontend stores `isAuthenticated` flag in localStorage
- Django session cookie maintains server-side session
- All authenticated requests include session cookie
- 401 responses trigger automatic logout

### 2. Video Processing Flow

#### New Video Submission
```
Frontend (ChatInterface.tsx) → POST /api/videos/process/ → videos.views.process_video
├── Input: videoUrl, query, chatId (optional)
├── Processing:
│   ├── Validate URL format (regex validation)
│   ├── Check for existing chat (if chatId provided)
│   ├── Create/Retrieve Video object
│   │   └── Deduplication: Same URL for same user won't create duplicate
│   ├── Create/Update VideoChat object
│   │   └── Stores chat history as JSON array
│   └── Generate template response (placeholder for actual AI processing)
└── Response: chatId, response, reasoning, keyFrames, timestamps
```

#### Chat Continuation Flow
```
Same video, new query:
├── Frontend sends: videoUrl, query, chatId (from previous response)
├── Backend:
│   ├── Retrieves existing VideoChat by chatId
│   ├── Appends new query to chat_history
│   ├── Processes query (currently template)
│   └── Updates chat_history with response
└── Maintains conversation context
```

#### Chat History Retrieval
```
Frontend → GET /api/videos/history/ → videos.views.get_chat_history
├── Processing:
│   ├── Query all VideoChat objects for current user
│   ├── Include related Video data
│   └── Format with metadata (id, title, message count, etc.)
└── Response: Array of chat sessions with full history
```

### 3. Data Persistence Architecture

#### Database Models Relationships
```
User (Custom Django User Model)
  ↓ (one-to-many)
Video (stores video URL/path)
  ↓ (one-to-many, PROTECT deletion)
VideoChat (stores conversation history)
  ├── video: ForeignKey to Video
  ├── user: ForeignKey to User
  └── chat_history: JSONField (array of Q&A pairs)
```

#### Chat History Structure
```json
{
  "chat_history": [
    {
      "query": "User's question about video",
      "response": {
        "response": "AI's answer",
        "reasoning": "How AI analyzed the video",
        "keyFrames": [...],
        "timestamps": [...]
      }
    }
  ]
}
```

### 4. Frontend State Management

#### Component Hierarchy
```
App.tsx (Authentication State)
  ├── Login/Signup (Set Authentication)
  └── ChatInterface (Main Application)
      ├── Sidebar
      │   ├── New Chat Button
      │   ├── Chat History List
      │   └── Message List (Current Session)
      ├── Main Area
      │   ├── ResponseTabs (Display Results)
      │   └── VideoInput + Query Form
      └── State Management:
          ├── messages: Current conversation
          ├── currentChatId: Active session ID
          ├── currentVideoUrl: Active video
          └── chatHistory: Previous sessions
```

#### State Flow During Interaction
1. **Initial Load**: Fetch chat history, check authentication
2. **New Query**: 
   - Add user message to local state
   - Send API request
   - Update with AI response
   - Refresh chat history
3. **Load Previous Chat**:
   - Set currentChatId and currentVideoUrl
   - Load messages from chat_history
   - Enable continuation of conversation
4. **New Chat**:
   - Clear all local state
   - Reset currentChatId and currentVideoUrl
   - Refresh chat history list

### 5. API Communication Layer

#### Request/Response Cycle
```
Frontend (axios) → Django REST Framework → View Function → Database
                ← JSON Response ← Serialization ← Model Data ←
```

#### Error Handling Flow
```
API Error → axios interceptor → Component error state → UI feedback
├── 401: Session expired → Auto logout
├── 400: Validation error → Display message
├── 500: Server error → Generic error message
└── Network error → Connection error message
```

## Current System Features

### Implemented Features
1. **Authentication System**
   - Email-based authentication (no username)
   - Session persistence with localStorage
   - Automatic logout on session expiry

2. **Video Chat System**
   - URL validation (client and server-side)
   - Video deduplication per user
   - Continuous chat sessions
   - Chat history management
   - Previous chat loading

3. **User Interface**
   - Dark theme with glassmorphism
   - Responsive tabbed interface
   - Real-time loading states
   - Error feedback system
   - Animation effects (Framer Motion)

### Template Response Structure
Currently, the system returns template responses with:
- **Response**: Generic AI answer
- **Reasoning**: Placeholder explanation
- **Key Frames**: SVG placeholder images with timestamps
- **Timestamps**: Time segments with descriptions

### Planned Features (Not Implemented)
1. **Actual Video Processing**
   - Frame extraction
   - Video analysis AI
   - RAG system integration
   - Real video thumbnails

2. **Advanced Features**
   - WebSocket for real-time updates
   - Video streaming support
   - File upload to server
   - Multi-language support

## Technical Stack Summary

### Backend Stack
- **Framework**: Django 5.2.6 + Django REST Framework
- **Database**: SQLite (development)
- **Authentication**: Django sessions + Custom EmailBackend
- **CORS**: django-cors-headers

### Frontend Stack
- **Framework**: React 19.1.1 + TypeScript
- **Build Tool**: Vite 7.1.2
- **Styling**: Tailwind CSS 4.1.13
- **Animations**: Framer Motion
- **HTTP Client**: Axios
- **Icons**: Lucide React

### Development Environment
- **Backend Port**: 8000
- **Frontend Port**: 3000
- **Python Environment**: Conda (guide-ai)
- **Package Management**: npm (frontend), pip (backend)

## Security Considerations

### Current Implementation
- CSRF protection enabled
- Session-based authentication
- Password hashing (Django default)
- CORS restricted to localhost:3000
- Input validation (URL format)

### Production Requirements
- Move SECRET_KEY to environment variable
- Set DEBUG = False
- Configure ALLOWED_HOSTS
- Implement HTTPS
- Add rate limiting
- Enhance input sanitization

## Database Schema

### Custom Models

#### users.User (Custom User Model)
- `email` - EmailField, unique (PRIMARY LOGIN)
- `first_name` - CharField, optional
- `last_name` - CharField, optional
- `is_active` - BooleanField
- `is_staff` - BooleanField
- `date_joined` - DateTimeField
- `password` - Hashed password

#### videos.Video
- `video_path` - CharField (stores URL)
- `title` - CharField (from first query)
- `uploaded_by` - ForeignKey to User
- `uploaded_at` - DateTimeField

#### videos.VideoChat
- `video` - ForeignKey to Video (PROTECT)
- `user` - ForeignKey to User
- `chat_history` - JSONField (conversation array)
- `created_at` - DateTimeField
- `updated_at` - DateTimeField

## File Structure

```
guide-ai/
├── backend/                 # Django backend
│   ├── settings.py         # Django configuration
│   ├── urls.py             # Main URL routing
│   └── wsgi.py            # WSGI application
├── users/                  # Authentication app
│   ├── models.py          # Custom User model
│   ├── views.py           # Auth endpoints
│   └── backends.py        # EmailBackend
├── videos/                 # Video processing app
│   ├── models.py          # Video, VideoChat models
│   └── views.py           # Video API endpoints
├── apps/web/              # React frontend
│   ├── src/
│   │   ├── components/    # React components
│   │   ├── services/      # API service layer
│   │   └── App.tsx        # Main application
│   └── package.json       # Frontend dependencies
└── requirements/          # Python dependencies
    ├── base.txt          # Core packages
    └── local.txt         # Development packages
```

## Known Limitations

1. **Video Processing**: Returns template responses only
2. **File Upload**: Not implemented (URL only)
3. **Authentication**: Session-only (no JWT)
4. **Database**: SQLite (not production-ready)
5. **Search**: No search functionality in chat history
6. **Export**: No chat export feature
7. **Sharing**: No video/chat sharing capability

## Error States and Handling

### Frontend Error States
- Invalid credentials → Red error message
- Session expired → Auto-logout with message
- Network error → Connection error display
- Invalid URL → Format validation error
- Server error → Generic error message

### Backend Error Responses
- 400: Bad Request (validation errors)
- 401: Unauthorized (authentication required)
- 404: Not Found (user/resource not found)
- 500: Internal Server Error

## Development Workflow

### Starting the Application
```bash
# Backend
conda activate guide-ai
cd guide-ai
python3 manage.py runserver

# Frontend (new terminal)
cd apps/web
npm run dev
```

### Making Changes
1. Backend changes: Django auto-reloads
2. Frontend changes: Vite HMR updates
3. Database changes: Create and run migrations
4. Style changes: Tailwind JIT compilation

This documentation represents the current state of the Guide AI system as of the latest update.