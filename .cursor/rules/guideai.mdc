---
description: Global Project Documentation (to be served as a reference to the agents)
globs:
alwaysApply: true
---

# Guide AI Project Documentation

## Database Schema

Currently using Django's default database configuration with SQLite for development.
Database URL can be configured via DATABASE_URL environment variable.

### Django Default Tables (managed by Django)
- auth_group
- auth_permission
- django_admin_log
- django_content_type
- django_session
- django_migrations

### Custom Models

#### users.User (replaces default auth_user)
- `email` - EmailField, unique, max_length=255 (PRIMARY LOGIN FIELD)
- `first_name` - CharField, max_length=30, blank=True
- `last_name` - CharField, max_length=30, blank=True
- `is_active` - BooleanField, default=True
- `is_staff` - BooleanField, default=False
- `is_superuser` - BooleanField (from PermissionsMixin)
- `date_joined` - DateTimeField, auto_now_add=True
- `last_login` - DateTimeField (from AbstractBaseUser)
- `password` - CharField (from AbstractBaseUser)
- `groups` - ManyToMany to auth.Group (from PermissionsMixin)
- `user_permissions` - ManyToMany to auth.Permission (from PermissionsMixin)

**Note**: Username field has been removed. Authentication is email-only.

#### videos.Video
- `video_path` - CharField, max_length=500
- `title` - CharField, max_length=255, blank=True
- `uploaded_by` - ForeignKey to users.User, CASCADE
- `uploaded_at` - DateTimeField, auto_now_add=True

#### videos.VideoChat
- `video` - ForeignKey to Video, PROTECT
- `chat_history` - JSONField, default=list
- `created_at` - DateTimeField, auto_now_add=True
- `updated_at` - DateTimeField, auto_now=True

## API Endpoints

### Admin Interface
- `/admin/` - Django Admin interface (authentication required)

### Authentication API Endpoints
- `POST /api/auth/login/` - User login with email/password
- `POST /api/auth/signup/` - User registration
- `POST /api/auth/logout/` - User logout

### Video Processing API Endpoints
- `POST /api/videos/process/` - Process video and query, returns template response

## Frontend Architecture

### Technology Stack
- React 19.1.1 with TypeScript
- Vite as build tool
- Tailwind CSS 4.1.13 for styling
- Framer Motion for animations
- React Router DOM for navigation
- React Hook Form for form handling
- Lucide React for icons
- Axios for API communication

### Component Structure

#### Authentication Components (`/apps/web/src/components/Auth/`)
- `Login.tsx` - Login page with email/password authentication and error handling
- `Signup.tsx` - User registration with validation and error handling
- `ForgotPassword.tsx` - Password reset functionality (not implemented)

#### Chat Components (`/apps/web/src/components/Chat/`)
- `ChatInterface.tsx` - Main chat interface with video upload/URL input and error handling
- `MessageList.tsx` - Displays conversation history in sidebar
- `VideoInput.tsx` - Handles video file upload or URL input
- `ResponseTabs.tsx` - Tabbed interface for displaying:
  - Response: AI-generated answer from backend
  - Reasoning: Analysis process explanation
  - Key Frames: Relevant video frames with timestamps
  - Timestamps: Clickable time segments with descriptions

#### API Service (`/apps/web/src/services/`)
- `api.ts` - Centralized API service using axios for backend communication

### Design System
- Dark theme with gradient backgrounds (gray-950 to gray-900)
- Glass morphism effects with backdrop blur
- Purple and blue accent colors for interactive elements
- Smooth animations using Framer Motion
- Error messages in red with semi-transparent backgrounds

## Current Feature Status

### Completed
- Basic Django project setup (Django 5.2.6)
- Django REST Framework integration
- CORS configuration for frontend-backend communication
- Custom User model with email-only authentication
- Authentication API endpoints (login, signup, logout)
- Video processing API endpoint with template responses
- Session-based authentication
- Frontend-backend integration with axios
- Error handling for authentication and video processing
- User feedback for 4XX and 5XX errors

### In Progress
- Video processing pipeline implementation
- RAG system implementation

### Planned
- WebSocket support for real-time processing updates
- Video streaming capabilities
- Multi-language support
- Mobile responsive design
- Actual video analysis (currently returns template responses)

## Known Issues/Constraints

### Configuration
- DEBUG = True (development mode)
- SECRET_KEY is hardcoded (needs to be moved to environment variable for production)
- ALLOWED_HOSTS is empty (needs configuration for production)
- Default SQLite database (may need PostgreSQL/MySQL for production)
- Frontend runs on port 3000, backend on port 8000

### Security Considerations
- CSRF protection enabled with trusted origins
- Session authentication configured
- Standard Django password validators in place
- Custom authentication backend (EmailBackend) for email-only login
- AUTH_USER_MODEL set to 'users.User'
- CORS configured for localhost:3000

## Technical Stack

### Backend
- Django 5.2.6
- Django REST Framework 3.15.2
- django-cors-headers 4.7.0
- django-environ 0.12.0
- Python (version as per system)
- SQLite (default database)

### Frontend
- React 19.1.1
- TypeScript 5.8.3
- Vite 7.1.2 (build tool)
- Tailwind CSS 4.1.13
- Framer Motion (animations)
- React Router DOM (routing)
- React Hook Form (form handling)
- Lucide React (icons)
- Axios (HTTP client)

## Error Handling

### Frontend Error Handling
- Login errors: Invalid credentials, server errors, connection issues
- Signup errors: Email exists, password mismatch, validation errors
- Video processing errors: Session expiry, server errors, connection issues
- User-friendly error messages displayed in UI
- Automatic logout on session expiry (401 errors)

### Backend Response Format
- Success responses include data and appropriate status codes
- Error responses handled by Django REST Framework
- Template responses for video processing (to be replaced with actual implementation)